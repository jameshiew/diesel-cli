name: Build Docker images

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: "Tag for the image"
  push:
    branches:
      - main
    paths:
      - .github/workflows/docker.yml
      - Dockerfile

env:
  IMAGE_NAME: diesel-cli
  IMAGE_TAG: "${{ github.sha }}"

jobs:
  set-image-tag:
    runs-on: ubuntu-22.04
    outputs:
      IMAGE_TAG: ${{ steps.set_outputs.outputs.IMAGE_TAG }}
    steps:
      - if: github.event_name == 'workflow_dispatch'
        name: Set tag from input
        run: |
          echo "IMAGE_TAG=${{ inputs.tag }}" >> $GITHUB_ENV
      - name: Forward IMAGE_TAG to later jobs
        id: set_outputs
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-22.04
    needs:
      - set-image-tag
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - run: |
          echo "IMAGE=${{secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.set-image-tag.outputs.IMAGE_TAG }}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          docker build \
            --platform linux/${{ matrix.arch }} \
            -t $IMAGE-${{ matrix.arch }} \
            .
      - run: docker push $IMAGE-${{ matrix.arch }}

  push-multiarch-manifest:
    runs-on: ubuntu-22.04
    needs:
      - set-image-tag
      - build
    steps:
      - run: |
          echo "IMAGE=${{secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.set-image-tag.outputs.IMAGE_TAG }}" >> $GITHUB_ENV
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          docker manifest create $IMAGE \
            --amend $IMAGE-amd64 \
            --amend $IMAGE-arm64
      - run: docker manifest push --purge $IMAGE
